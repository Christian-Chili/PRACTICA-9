using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.IO;
using System.Xml;
using System.Collections.Generic;
namespace XMLexpe1
{
    public partial class WebForm1 : System.Web.UI.Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {

        }

        protected void cmdCreateXml_Click(object sender, EventArgs e)
        {
            FileStream fs = new FileStream("c:\\SuperProProductList.xml",
                FileMode.Create);
            XmlTextWriter w = new XmlTextWriter(fs, null);

            w.WriteStartDocument();
            w.WriteStartElement("SuperProProductList");
            w.WriteComment("This file generated by the XmlTextWriter class.");

            w.WriteStartElement("Producto");
            w.WriteAttributeString("ID", "", "1");
            w.WriteAttributeString("Name", "", "Chair");

            w.WriteStartElement("Price");
            w.WriteString("49.33");

            w.WriteEndElement();

            w.WriteEndElement();

            w.WriteStartElement("Product");
            w.WriteAttributeString("ID", "", "2");
            w.WriteAttributeString("Name", "", "Car");

            w.WriteStartElement("Price");
            w.WriteString("43399.55");
            w.WriteEndElement();

            w.WriteEndElement();

            w.WriteStartElement("Product");
            w.WriteAttributeString("ID", "", "3");
            w.WriteAttributeString("Name", "", "Fresh Fruit Basket");

            w.WriteStartElement("Price");
            w.WriteString("49.99");
            w.WriteEndElement();

            w.WriteEndElement();
            w.WriteEndDocument();
            w.Close();

            lblXml.Text = "File c:\\SuperProProductList.xml writeen sucessfuly.";
        }
        protected void cmdReadXml_Click(object sender, EventArgs e)



        {

            FileStream fs = new FileStream(@"C:\SuperProProductList.xml", FileMode.Open);

            XmlTextReader r = new XmlTextReader(fs);

            StringWriter writer = new StringWriter();

            while (r.Read())

            {

                writer.Write("<b>Type:</b> ");

                writer.Write(r.NodeType.ToString()); ;

                writer.Write("<br>");

                if (r.Name != "")

                {

                    writer.Write("<b>Name:</b> ");

                    writer.Write(r.Name);

                    writer.Write("<br>");

                }

                if (r.Value != "")

                {

                    writer.Write("<b>Value:</b> ");

                    writer.Write(r.Value);

                    writer.Write("<br>");

                }

                if (r.AttributeCount > 0)

                {

                    writer.Write("<b>Attributes:</b> ");

                    for (int i = 0; i < r.AttributeCount; i++)

                    {

                        writer.Write("  ");

                        writer.Write(r.GetAttribute(i));

                        writer.Write("  ");

                    }

                    writer.Write("<br>");

                }

                writer.Write("<br>");

            }

            r.Close();

            lblXml.Text = writer.ToString();

        }



        protected void cdmReadXmlAsObjects_Click(object sender, EventArgs e)



        {

            FileStream fs = new FileStream(@"C:\SuperProProductList.xml", FileMode.Open);

            XmlTextReader r = new XmlTextReader(fs);

            List<Product> products = new List<Product>();

            while (r.Read())



            {

                if (r.NodeType == XmlNodeType.Element && r.Name == "Product")

                {

                    Product newProduct = new Product();

                    newProduct.ID = Int32.Parse(r.GetAttribute(0));

                    newProduct.Name = r.GetAttribute(1);

                    while (r.NodeType != XmlNodeType.EndElement)

                    {

                        r.Read();

                        if (r.Name == "Price")

                        {

                            while (r.NodeType != XmlNodeType.EndElement)

                            {

                                r.Read();

                                if (r.NodeType == XmlNodeType.Text)

                                {

                                    newProduct.Price = decimal.Parse(r.Value);

                                }

                            }

                        }

                    }

                    products.Add(newProduct);

                }

            }

            r.Close();

            gridResults.DataSource = products;

            gridResults.DataBind();

        }

    }
    protected void Page_Load(object sender, EventArgs e)

    {

        var movies = GetMovies();

        Dictionary<int, Grouping> groups = new Dictionary<int, Grouping>();

        foreach (Movie m in movies)

        {

            if (!groups.ContainsKey(m.Genre))

            {

                groups[m.Genre] = new Grouping { Genre = m.Genre, MovieCount = 0 };

            }

            groups[m.Genre].MovieCount++;

        }

        List<Grouping> results = new List<Grouping>(groups.Values);

        results.Sort(delegate (Grouping x, Grouping y)

        {

            return

            x.MovieCount > y.MovieCount ? -1 :

            x.MovieCount < y.MovieCount ? 1 :

            0;

        });

        this.GridView1.DataSource = results;



        this.GridView1.DataBind();

    }
    protected void Page_Load(object sender, EventArgs e)

    {

        var movies = GetMovies();

        var query = new List<Movie>(); foreach (var m in movies)

        {

            if (m.Genre == 0) query.Add(m);

        }

        this.GridView1.DataSource = query; this.GridView1.DataBind();



        //var movies = GetMovies(); 

        //this.GridView1.DataSource = movies; this.GridView1.DataBind(); 

    }
    protected void Page_Load(object sender, EventArgs e)

    {

        var movies = GetMovies();

        Dictionary<int, Grouping> groups = new Dictionary<int, Grouping>();

        foreach (Movie m in movies)

        {

            if (!groups.ContainsKey(m.Genre))

            {

                groups[m.Genre] = new Grouping { Genre = m.Genre, MovieCount = 0 };

            }

            groups[m.Genre].MovieCount++;

        }

        List<Grouping> results = new List<Grouping>(groups.Values);

        results.Sort(delegate (Grouping x, Grouping y)

        {

            return

            x.MovieCount > y.MovieCount ? -1 :

            x.MovieCount < y.MovieCount ? 1 :

            0;

        });

        this.GridView1.DataSource = results;



        this.GridView1.DataBind();

    }
    protected void Page_Load(object sender, EventArgs e)

    {

        var movies = GetMovies();

        var query = from m in movies select m;

        this.GridView1.DataSource = query;

        this.GridView1.DataBind();



    }
    protected void Page_Load(object sender, EventArgs e)

    {

        var movies = GetMovies();

        var query = from m in movies select new { m.Title, m.Genre };

        this.GridView1.DataSource = query;

        this.GridView1.DataBind();



    }
    protected void Page_Load(object sender, EventArgs e)

    {

        var movies = GetMovies();

        var query = from m in movies select new { MovieTitle = m.Title, MovieGenre = m.Genre };

        this.GridView1.DataSource = query;

        this.GridView1.DataBind();



    }
    protected void Page_Load(object sender, EventArgs e)

    {

        var movies = GetMovies();

        var query = from m in movies orderby m.Title descending select new { MovieTitle = m.Title, MovieGenre = m.Genre };





        this.GridView1.DataSource = query;

        this.GridView1.DataBind();



    }
    public class LastNameComparer : IComparer<string>

    {

        public int Compare(string x, string y)

        {

            var director1LastName = x.Substring(x.LastIndexOf(' ')); var

         director2LastName = y.Substring(y.LastIndexOf(' ')); return

         director1LastName.CompareTo(director2LastName);

        }

    }
    protected void Page_Load(object sender, EventArgs e)

    {

        var movies = GetMovies();

        var query = movies.OrderByDescending(m => m.Director, new LastNameComparer()).Select(m => new

        {



            MovieDirector = m.Director,

            MovieTitle = m.Title,

            MovieGenre = m.Genre

        });



        this.GridView1.DataSource = query;

        this.GridView1.DataBind();



    }
    protected void Page_Load(object sender, EventArgs e)

    {

        var movies = GetMovies();

        this.TotalMovies.Text = movies.Count.ToString();

        this.LongestRunTime.Text = movies.Max(m => m.RunTime).ToString();

        this.ShortestRunTime.Text = movies.Min(m => m.RunTime).ToString();

        this.AverageRunTime.Text = movies.Average(m => m.RunTime).ToString();





    }
}

} 
    

